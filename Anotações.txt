--configuração
	.Net 6.0
	NodeJS 14
	ReactJS
	se quiser, NVM para controlar versões do NODE:
	NVM -- https://github.com/nvm-sh/nvm ou pelo instalador do site oficial
	
	--extensões VSCode
	.NET Core Tools - jun han --otima pra build e run do .net
	JavaScript Debugger - microsoft - debug java script
	Auto Close Tag - jun han - fechamento de tag auto
	Auto Close Tag - steoates - importa as biblioteca do typescript
	Auto Import - ES6, TS, JSX, TSX - sergey koreuk - importa as biblioteca pra tudo
	Auto Rename Tag - jun han - ajuda com tags
	Bracket Pair Colorizer 2 - coenraads - ajuda visual no codigo
	GitLens - Git supercharged - philipp kief - icons para o vscode
	c# - microsoft
	C# Extensions - joskreativ - ajuda no dev do C#
	Community Material Theme - equinusocio - temas para o vscode
	ES7+ React/Redux/React-Native snippets - dsznajder - snippers para agilizar o dev em reactjs
	ESLint - microsft - corretor de javascript
	MySQL - cweijan - mysql dentro do vscode 
	
	npm  - microsft - ajuda a controlar dependencias
	npm Intellisense - Chistian Kohler - ajuda a controlar dependencias
	NuGet Gallery - pcislo - ajuda instalar extensões .net e C#
	Path Intellisense - Chistian Kohler - ajuda a codar
	Prettier - Code formatter - Prettier - ajuda a indentar o codigo (CTRL+S)

--NodeJS
	--mudar versão do node --não esquecer de instalar o nvm
	nvm use 14 

--ReactJS
	--instalando as bibliotecas .vscode
	npm i -g create-react-native-app //i - instalar | -g de forma global
	--criando o projeto
	npx create-react-app pro-atividade-app //caso queria usar o npm: --use-npm e caso queira o react com typescript: --template typescript
	-criando o node_modules
	npm install --no-audit --save --save-exact --loglevel error react react-dom react-scripts cra-template

	--executando
	npm run start

	--instalando o bootstrap no react na sua ultima versão
	npm install bootstrap    --se quiser uma versão especifica, usa no final sem espaço: @4.0.1   //link para ver documentação: https://getbootstrap.com/docs/5.2/getting-started/introduction/
	--react-bootstrap
	npm install react-bootstrap  //link para ver documentação: https://react-bootstrap.github.io/getting-started/introduction

	--instalando FontAwesome - npm
	npm install --save @fortawesome/fontawesome-free
		lembrar de importar no index.css

	--instalar components reactjs no chrome
		React Developer Tools	

	--instalando Axios (usado para trabalhar com as requisições HTTP da API feita em .Net)
		npm install --save axios
		
	--instalando React-Bootstrap
		npm install react-bootstrap@next bootstrap@5.1.1
		-documentação: https://react-bootstrap.netlify.app/


--Comandos Git
	git init --iniciazando o git (lembra de fazer na pasta que quer mandar)
	git status -- mostra o que tem pendente de adcionar (commit)
	git add . --adiciona tudo
	git commit	--para fazer o commits dos objetos, lembrar de colocar a anotação do commit com o (-m)
	git remote add origin --para enviar para o github, lembra de colocar o caminho .git disponibilizado pelo github
	git push -u origin main -- confirmando e enviado os arquivos
	dotnet new gitignore - ele cria um ignore padrão para o .Net 

--DotNet 5.0.408 (depois no curso vamos migrar para o dotnet 6.0.410)
	dotnet --version
	dotnet --list-sdks
	--pegando outra versão do sdk
		dotnet new globaljson --sdk-version 5.0.408 --force
	--criando um novo projeto API
		dotnet new webapi -n [nomeProjeto]

	--executando o dotnet
		dotnet run ou dotnet watch run

		obs.: caminho para acessar a API: https://localhost:5001/swagger/index.html

		--instalando o certificado para usar o https ou caso o run não funcione (reiniciar a maquina)
			1 - dotnet dev-certs https --clean
			2 - dotnet dev-certs https --trust

			obs.: caso não queria usar o https, comentar o https no startup.cs e no launchSetting.json

	--instalando o EF
		dotnet tool install --global dotnet-ef --version 5.0.10
	--chamando o EF
		dotnet -ef
	--adicionando no EF core e outros
		dotnet add package Microsoft.EntityFrameworkCore --version 5.0.10
		dotnet add package Microsoft.EntityFrameworkCore.SQLite --version 5.0.10
		dotnet add package Microsoft.EntityFrameworkCore.Design --version 5.0.10
		dotnet add package Microsoft.EntityFrameworkCore.Tools --version 5.0.10

	--usando EF
		-lembrando que -h é para puxar o help para a linha de comando
			dotnet ef migrations add -h
			dotnet ef -h
		-criando as migrations
			dotnet ef migrations add initial -o Data/Migrations
		--criar o banco de dados
			dotnet ef database update

	--se quiser definir um prefixo para suas propriedade
		-CTRL+SHIFT+P -> Preferences: Open Settings (UI) -> find no C# private member prefix -> coloca o que quiser, estou usando o _, mas se não definir, ficara o default que é: this.{nome da propriedade}

	--não esquecer de liberar o CORS para o front acessar o back
		-acontece no componente Startup.cs

	--criando um solution (tem que ser fora da raiz do projeto, junto do global.json)
		dotnet new sln -n ProAtividade
	
	--adicionando e referenciando a solução
		dotnet sln ProAtividade.sln add ProAtividade.API
		dotnet sln ProAtividade.sln add ProAtividade.Data
		dotnet sln ProAtividade.sln add ProAtividade.Domain

		dotnet add ProAtividade.API reference ProAtividade.Data
		dotnet add ProAtividade.API reference ProAtividade.Domain
		dotnet add ProAtividade.Data reference ProAtividade.Domain


	--build no sistema pela solução (tem que ser fora da raiz do projeto, junto do global.json)
		dotnet restore

	--criando as Camadas (são chamados de projetos)
		dotnet new classlib -n ProAtividade.Domain
		dotnet new classlib -n ProAtividade.Data
